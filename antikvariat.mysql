DROP DATABASE IF EXISTS antikvariat;

CREATE DATABASE antikvariat;

USE antikvariat;
CREATE TABLE Sklad (
    idSkladu int NOT NULL,
    Ulice varchar(255) NOT NULL,
    Mesto varchar(255) NOT NULL,
    Kapacita int,
    maxKapacita int,
    CHECK (kapacita <= maxKapacita),
    PRIMARY KEY (idSkladu)
); 

CREATE TABLE Polozka (
    idPolozka int NOT NULL,
    Nazev  varchar(255),
    Autor varchar(255),
    datumVydani date,
    idSkladu int NOT NULL,
    cena int NOT NULL,
    CHECK (cena > 0),
    PRIMARY KEY (idPolozka),
    FOREIGN KEY (idSkladu) REFERENCES Sklad(idSkladu)
);

CREATE TABLE Kniha (
    idKniha int auto_increment NOT NULL,
    typObalu int,
    FOREIGN KEY (idKniha) REFERENCES Polozka(idPolozka),
    PRIMARY KEY (idKniha)    
);

CREATE TABLE Noviny (
    idNoviny int auto_increment NOT NULL,
    priloha BOOLEAN,
    FOREIGN KEY (idNoviny) REFERENCES Polozka(idPolozka),
    PRIMARY KEY (idNoviny)    
);

CREATE TABLE Casopis (
    idCasopis int auto_increment NOT NULL,
    priloha BOOLEAN,
    FOREIGN KEY (idCasopis) REFERENCES Polozka(idPolozka),
    PRIMARY KEY (idCasopis)
);

CREATE TABLE Osoba (
    idOsoba int NOT NULL,
    jmeno varchar(255),
    prijmeni varchar(255) NOT NULL,
    Ulice varchar(255),
    Mesto varchar(255),
    datumNarozeni DATE,
    telefon int,
    email varchar(255),
    CHECK (email LIKE '%@%.%'),
    PRIMARY KEY (idOsoba)
);

CREATE TABLE Zamestnanec (
    idZamestnanec int auto_increment NOT NULL,
    rodneCislo VARCHAR(11) UNIQUE,
    pobocka int,
    zdravotniPojistovna int NOT NULL,
    plat int NOT NULL,
    CHECK (plat >= 0),
    FOREIGN KEY (idZamestnanec) REFERENCES Osoba(idOsoba),
    PRIMARY KEY (idZamestnanec),
    CONSTRAINT chk_rodneCislo CHECK (rodneCislo REGEXP '^[0-9]{6}/[0-9]{4}$')
);

CREATE TABLE Zakaznik (
    idZakaznik int auto_increment NOT NULL,
    datumRegistrace DATE,
    premium BOOLEAN,
    sleva int,
    CHECK (sleva <= 100),
    posledniObjednavka DATE,
    FOREIGN KEY (idZakaznik) REFERENCES Osoba(idOsoba),
    PRIMARY KEY (idZakaznik)
);


CREATE TABLE Objednavka (
    idObjednavka int NOT NULL,
    datumVytvoreni DATE,
    cena int,
    zpusobDopravy int,
    idPolozka int NOT NULL,
    idZakaznik int NOT NULL,
    FOREIGN KEY (idZakaznik) REFERENCES Zakaznik(idZakaznik),
    FOREIGN KEY (idPolozka) REFERENCES Polozka(idPolozka),
    PRIMARY KEY (idObjednavka)
);

CREATE TABLE Rezervace (
    idRezervace int NOT NULL,
    datumVytvoreni DATE,
    delkaRezervace int,
    idPolozka int NOT NULL,
    idZakaznik int NOT NULL,
    FOREIGN KEY (idZakaznik) REFERENCES Zakaznik(idZakaznik),
    FOREIGN KEY (idPolozka) REFERENCES Polozka(idPolozka),
    PRIMARY KEY (idRezervace)
);

CREATE TABLE Vydej (
    idVydej int NOT NULL,
    idObjednavka int NOT NULL,
    idZamestnanec int NOT NULL,
    idSkladu int NOT NULL,
    datumVydani DATE,
    FOREIGN KEY (idZamestnanec) REFERENCES Zamestnanec(idZamestnanec),
    FOREIGN KEY (idSkladu) REFERENCES Sklad(idSkladu),
    FOREIGN KEY (idObjednavka) REFERENCES Objednavka(idObjednavka),
    PRIMARY KEY (idVydej)
);


-- INSERTS

INSERT INTO Sklad (idSkladu, Ulice, Mesto, Kapacita, maxKapacita)
VALUES
    (1, 'Vinohradská 123', 'Praha', 1200000, 1500000),
    (2, 'Náměstí Republiky 456', 'Brno', 1500000, 2000000),
    (3, 'Masarykova 789', 'Ostrava', 2000000, 2500000),
    (4, 'Na Příkopě 234', 'Liberec', 3000000, 5000000),
    (5, 'Plzeňská 567', 'Plzeň', 2500000, 3000000);


INSERT INTO Polozka (idPolozka, Nazev, Autor, datumVydani, idSkladu, cena)
VALUES
    (1, 'Nádherný svět', 'Josef Čapek', '1921-05-23', 1, 500),
    (2, 'Český rok', 'Alois Jirásek', '1896-08-17', 2, 650),
    (3, 'Hrdinové Lidových písní', 'Karel Bendl', '1900-12-08', 3, 420),
    (4, 'Evropa ve středověku', 'Norman Cantor', '1998-02-15', 4, 320),
    (5, 'Dějiny českého národa', 'František Palacký', '1848-11-12', 5, 850),
    (6, 'Pohádky', 'Božena Němcová', '1845-06-20', 1, 280),
    (7, 'Kytice', 'Karel Jaromír Erben', '1853-11-13', 2, 390),
    (8, 'Nicomachean Ethics', 'Aristotle', '0000-01-01', 3, 900),
    (9, 'The Prince', 'Niccolo Machiavelli', '1532-12-10', 4, 600),
    (10, 'Hamlet', 'William Shakespeare', '1609-08-11', 5, 750),
    (11, 'Crime and Punishment', 'Fyodor Dostoevsky', '1866-11-11', 1, 680),
    (12, 'The Brothers Karamazov', 'Fyodor Dostoevsky', '1880-11-11', 2, 750),
    (13, 'The Odyssey', 'Homer', '0000-01-01', 3, 500),
    (14, 'One Hundred Years of Solitude', 'Gabriel Garcia Marquez', '1967-05-30', 4, 640),
    (15, 'The Great Gatsby', 'F. Scott Fitzgerald', '1925-04-10', 5, 850),
    (16, 'To Kill a Mockingbird', 'Harper Lee', '1960-07-11', 1, 700),
    (17, '1984', 'George Orwell', '1949-06-08', 2, 580),
    (18, 'Pride and Prejudice', 'Jane Austen', '1813-01-28', 3, 890),
    (19, 'The Catcher in the Rye', 'J.D. Salinger', '1951-07-16', 4, 780),
    (20, 'The Lord of the Rings', 'J.R.R. Tolkien', '1954-07-29', 5, 1050),
    (21, 'Harry Potter and the Philosopher''s Stone', 'J.K. Rowling', '1997-06-26', 1, 920),
    (22, 'The Hobbit', 'J.R.R. Tolkien', '1937-09-21', 2, 770),
    (23, 'Alice''s Adventures in Wonderland', 'Lewis Carroll', '1865-11-26', 3, 550),
    (24, 'The Chronicles of Narnia', 'C.S. Lewis', '1950-10-16', 4, 790),
    (25, 'The Hitchhiker''s Guide to the Galaxy', 'Douglas Adams', '1979-10-12', 5, 680),
    (26, 'Brave New World', 'Aldous Huxley', '1932-05-11', 1, 720),
    (27, 'The Shining', 'Stephen King', '1977-01-28', 2, 850),
    (28, 'The Girl with the Dragon Tattoo', 'Stieg Larsson', '2005-08-01', 3, 920),
    (29, 'The Hunger Games', 'Suzanne Collins', '2008-09-14', 4, 670),
    (30, 'The Road', 'Cormac McCarthy', '2006-09-26', 5, 690);

-- Vložení dat do tabulky Kniha
INSERT INTO Kniha (idKniha, typObalu)
SELECT idPolozka, FLOOR(RAND() * 3) + 1
FROM Polozka
ORDER BY idPolozka
LIMIT 30;    

INSERT INTO Polozka (idPolozka, Nazev, Autor, datumVydani, idSkladu, cena)
VALUES
    (31, 'Science Magazine', 'Various Authors', '2023-05-01', 1, 120),
    (32, 'National Geographic', 'Various Authors', '2023-06-15', 2, 150),
    (33, 'Fashion Weekly', 'Fashion Experts', '2023-07-20', 3, 80),
    (34, 'Tech Trends', 'Tech Enthusiasts', '2023-08-10', 4, 100),
    (35, 'Art Review', 'Art Critics', '2023-09-05', 5, 130);


INSERT INTO Casopis (idCasopis, priloha)
SELECT idPolozka, TRUE
FROM Polozka
WHERE Nazev IN ('Science Magazine', 'National Geographic', 'Fashion Weekly', 'Tech Trends', 'Art Review');    


-- Vložení dat do tabulky Osoba
INSERT INTO Osoba (idOsoba, jmeno, prijmeni, Ulice, Mesto, datumNarozeni, telefon, email)
VALUES
    (1, 'Anna', 'Nováková', 'Hlavní 123', 'Praha', '1990-05-15', 123456789, 'anna@email.com'),
    (2, 'Pavel', 'Svoboda', 'Náměstí 456', 'Brno', '1985-08-20', 987654321, 'pavel@email.com'),
    (3, 'Martina', 'Kučerová', 'Lesní 789', 'Ostrava', '1992-03-10', 555123456, 'martina@email.com'),
    (4, 'Jakub', 'Veselý', 'Polní 234', 'Plzeň', '1980-09-05', 789555123, 'jakub@email.com'),
    (5, 'Eva', 'Procházková', 'Údolní 567', 'Liberec', '1995-01-22', 456789555, 'eva@email.com'),
    (6, 'Tomáš', 'Novotný', 'Horská 890', 'Olomouc', '1987-06-18', 654321789, 'tomas@email.com'),
    (7, 'Lucie', 'Marešová', 'Pole 111', 'České Budějovice', '1993-11-30', 789123654, 'lucie@email.com'),
    (8, 'Marek', 'Hájek', 'Lánová 222', 'Hradec Králové', '1983-04-25', 321456987, 'marek@email.com'),
    (9, 'Veronika', 'Nová', 'Stráně 333', 'Zlín', '1998-08-08', 159753456, 'veronika@email.com'),
    (10, 'Jiří', 'Kovář', 'Říční 444', 'Ústí nad Labem', '1989-02-12', 753159852, 'jiri@email.com'),
    (11, 'Petra', 'Doležalová', 'Luková 555', 'Pardubice', '1991-07-28', 852963147, 'petra@email.com'),
    (12, 'Lukáš', 'Holub', 'Kopcová 666', 'Kladno', '1982-12-03', 369147258, 'lukas@email.com'),
    (13, 'Jana', 'Havlíčková', 'Květinová 777', 'Havířov', '1994-05-19', 147258369, 'jana@email.com'),
    (14, 'Ondřej', 'Kříž', 'Školní 888', 'Jihlava', '1986-10-14', 258369147, 'ondrej@email.com'),
    (15, 'Simona', 'Pospíšilová', 'Travnatá 999', 'Teplice', '1997-03-08', 963852741, 'simona@email.com'),
    (16, 'Adam', 'Ševčík', 'Hájová 101', 'Most', '1984-09-24', 741852963, 'adam@email.com'),
    (17, 'Karolína', 'Matějková', 'Loučná 202', 'Karlovy Vary', '1996-01-10', 852741963, 'karolina@email.com'),
    (18, 'Petr', 'Richter', 'Panská 303', 'Prostějov', '1981-06-05', 369852147, 'petr@email.com'),
    (19, 'Marie', 'Burešová', 'Jezerní 404', 'Česká Lípa', '1999-11-15', 147852369, 'marie@email.com'),
    (20, 'Filip', 'Kadlec', 'Sady 505', 'Mladá Boleslav', '1988-04-20', 852369147, 'filip@email.com'),
    (21, 'Jana', 'Nováková', 'Hlavní 123', 'Praha', '1990-05-15', 123456789, 'anna@email.com');


-- Zaměstnanci
INSERT INTO Zamestnanec (idZamestnanec, rodneCislo, pobocka, zdravotniPojistovna, plat)
VALUES
    (1, '920615/1234', 1, 123456789, 50000),
    (2, '830720/5678', 2, 987654321, 55000),
    (3, '750805/9012', 3, 456789012, 60000),
    (4, '660910/3456', 4, 234567890, 52000),
    (5, '570925/7890', 5, 345678901, 48000);

-- Vložení dat pro Zákazníky s datem poslední objednávky u 90%
INSERT INTO Zakaznik (datumRegistrace, premium, sleva, posledniObjednavka)
SELECT
    '2022-01-01', -- Nahraďte tímto datem nebo použijte nějaký jiný podle potřeby
    RAND() > 0.5, -- Náhodný boolean pro premium
    FLOOR(RAND() * 100), -- Náhodná sleva
    CASE WHEN RAND() <= 0.9 THEN DATE_ADD(NOW(), INTERVAL -FLOOR(RAND() * 365) DAY) END -- Náhodné datum poslední objednávky u 90%
FROM
    information_schema.tables LIMIT 21; -- Omezení na 20 zákazníků    



INSERT INTO Objednavka (idObjednavka, datumVytvoreni, cena, zpusobDopravy, idPolozka, idZakaznik)
VALUES
    (1, '2023-01-15', 500, 1, 1, 1),
    (2, '2023-02-02', 650, 2, 2, 2),
    (3, '2023-03-20', 420, 1, 3, 3),
    (4, '2023-04-08', 320, 3, 4, 4),
    (5, '2023-05-12', 850, 2, 5, 5),
    (6, '2023-06-25', 280, 1, 6, 6),
    (7, '2023-07-18', 390, 3, 7, 7),
    (8, '2023-08-21', 900, 2, 8, 8),
    (9, '2023-09-14', 600, 1, 9, 9),
    (10, '2023-10-30', 750, 3, 10, 10),
    (11, '2023-10-30', 750, 1, 15, 21);

INSERT INTO Rezervace (idRezervace, datumVytvoreni, delkaRezervace, idPolozka, idZakaznik)
VALUES
    (1, '2023-01-08', 7, 1, 1),
    (2, '2023-01-19', 14, 2, 2),
    (3, '2023-03-10', 10, 3, 3),
    (4, '2023-03-18', 21, 4, 4),
    (5, '2023-04-30', 30, 5, 5),
    (6, '2023-04-30', 30, 15, 5);

INSERT INTO Vydej (idVydej, idObjednavka, idZamestnanec, idSkladu, datumVydani)
VALUES
    (1, 1, 1, 1, '2023-01-25'),
    (2, 2, 2, 2, '2023-02-15'),
    (3, 3, 3, 3, '2023-04-05'),
    (4, 4, 4, 4, '2023-04-25'),
    (5, 5, 5, 5, '2023-06-01'),
    (6, 6, 1, 1, '2023-07-01'),
    (7, 7, 2, 2, '2023-07-20');    


-- DOTAZY
-- suma cen objednavek
SELECT SUM(p.cena) AS celkova_cena_objednavek
FROM Objednavka o
LEFT JOIN Polozka p ON o.idPolozka = p.idPolozka;

-- suma cen rezervaci bez provedenych objednavek
SELECT SUM(p.cena) AS celkova_cena_nevydanych_rezervaci
FROM Rezervace r
LEFT JOIN Polozka p ON r.idPolozka = p.idPolozka
LEFT JOIN Objednavka o ON r.idPolozka = o.idPolozka
WHERE o.idObjednavka IS NULL;

-- select zakazniku, kteri jsou zamestnanci
SELECT *
FROM Zakaznik z
JOIN Zamestnanec m ON z.idZakaznik = m.idZamestnanec;

-- pocet zakazniku mladsich 30 let
SELECT COUNT(*) AS pocet_mladsich
FROM Zakaznik z
JOIN Osoba o ON z.idZakaznik = o.idOsoba
WHERE DATEDIFF(CURDATE(), o.datumNarozeni) < 30 * 366;

-- select 10 nejnovejsich knih
SELECT p.*
FROM Polozka p
JOIN Kniha k ON p.idPolozka = k.idKniha
ORDER BY p.datumVydani DESC
LIMIT 10;

-- najdi nejstarsi objednanou knihu
SELECT p.*
FROM Polozka p
JOIN Objednavka o ON p.idPolozka = o.idPolozka
JOIN Kniha k ON p.idPolozka = k.idKniha
ORDER BY p.datumVydani ASC
LIMIT 1;

-- Sklad ktery vydal nejvice polozek + pocet vydanych polozek
SELECT s.*, COUNT(o.idPolozka) AS pocet_vydanych_polozek 
FROM Sklad s
JOIN Vydej v ON s.idSkladu = v.idSkladu
JOIN Objednavka o ON v.idObjednavka = o.idObjednavka
GROUP BY s.idSkladu
ORDER BY COUNT(o.idPolozka) DESC
LIMIT 2;

SELECT Mesto, COUNT(z.idZakaznik) AS PocetZakazniku
FROM Osoba os
JOIN Zakaznik z ON os.idOsoba = z.idZakaznik
JOIN Objednavka o ON z.idZakaznik = o.idZakaznik
GROUP BY os.Mesto
ORDER BY PocetZakazniku DESC
LIMIT 1;



-- PRAVIDLA!
-- pravidlo: kontrola kapacity
INSERT INTO Sklad (idSkladu, Ulice, Mesto, Kapacita, maxKapacita)
VALUES
    (6, 'Vinohradská 123', 'Praha', 1200000, 15);

-- pravidlo: kontrola emailu
INSERT INTO Osoba (idOsoba, jmeno, prijmeni, Ulice, Mesto, datumNarozeni, telefon, email)
VALUES
    (21, 'Filip', 'Kadlec', 'Sady 505', 'Mladá Boleslav', '1988-04-20', 852369147, 'filipemail.com');

-- pravidlo: kontrola slevy
INSERT INTO Zakaznik (idZakaznik, datumRegistrace, premium, sleva, posledniObjednavka)
VALUES
    (21, '2022-06-25', false, 110, null);    

-- pravidlo: kontrala UNIQUE rodne cislo
INSERT INTO Zamestnanec (idZamestnanec, rodneCislo, pobocka, zdravotniPojistovna, plat)
VALUES
    (7, '920615/1234', 3, 123456789, 50000);    

-- pravidlo: kontrola zadani not idZamestnanec
INSERT INTO Vydej (idVydej, idObjednavka, idZamestnanec, idSkladu, datumVydani)
VALUES
    (1, 1, NULL, 1, '2023-01-25');    

-- pravidlo: kontrola formatu rodneho cisla
INSERT INTO Zamestnanec (idZamestnanec, rodneCislo, pobocka, zdravotniPojistovna, plat)
VALUES
    (6, '92061A/1234', 3, 123456789, 50000);

-- pravidlo: kontrola platu - nemuze byt zaporny
INSERT INTO Zamestnanec (idZamestnanec, rodneCislo, pobocka, zdravotniPojistovna, plat)
VALUES
    (7, '920610/1234', 3, 123456789, -50000);

-- pravidlo: kontrola ceny polozky nesmi byt zaprna nebo nula.
INSERT INTO Polozka (idPolozka, Nazev, Autor, datumVydani, idSkladu, cena)
VALUES
    (36, 'Nádherný svět', 'Josef Čapek', '1921-05-23', 1, 0);
